// Code generated by counterfeiter. DO NOT EDIT.
package routefakes

import (
	"sync"

	"code.cloudfoundry.org/navigator/route"
)

type FakeResolver struct {
	ResolveAddrStub        func(string) (string, error)
	resolveAddrMutex       sync.RWMutex
	resolveAddrArgsForCall []struct {
		arg1 string
	}
	resolveAddrReturns struct {
		result1 string
		result2 error
	}
	resolveAddrReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResolver) ResolveAddr(arg1 string) (string, error) {
	fake.resolveAddrMutex.Lock()
	ret, specificReturn := fake.resolveAddrReturnsOnCall[len(fake.resolveAddrArgsForCall)]
	fake.resolveAddrArgsForCall = append(fake.resolveAddrArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ResolveAddr", []interface{}{arg1})
	fake.resolveAddrMutex.Unlock()
	if fake.ResolveAddrStub != nil {
		return fake.ResolveAddrStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resolveAddrReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeResolver) ResolveAddrCallCount() int {
	fake.resolveAddrMutex.RLock()
	defer fake.resolveAddrMutex.RUnlock()
	return len(fake.resolveAddrArgsForCall)
}

func (fake *FakeResolver) ResolveAddrCalls(stub func(string) (string, error)) {
	fake.resolveAddrMutex.Lock()
	defer fake.resolveAddrMutex.Unlock()
	fake.ResolveAddrStub = stub
}

func (fake *FakeResolver) ResolveAddrArgsForCall(i int) string {
	fake.resolveAddrMutex.RLock()
	defer fake.resolveAddrMutex.RUnlock()
	argsForCall := fake.resolveAddrArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeResolver) ResolveAddrReturns(result1 string, result2 error) {
	fake.resolveAddrMutex.Lock()
	defer fake.resolveAddrMutex.Unlock()
	fake.ResolveAddrStub = nil
	fake.resolveAddrReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeResolver) ResolveAddrReturnsOnCall(i int, result1 string, result2 error) {
	fake.resolveAddrMutex.Lock()
	defer fake.resolveAddrMutex.Unlock()
	fake.ResolveAddrStub = nil
	if fake.resolveAddrReturnsOnCall == nil {
		fake.resolveAddrReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.resolveAddrReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeResolver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveAddrMutex.RLock()
	defer fake.resolveAddrMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResolver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ route.Resolver = new(FakeResolver)
