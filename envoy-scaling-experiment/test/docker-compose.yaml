version: "3.7"
services:
  jaeger-collector:
    image: jaegertracing/jaeger-collector:1.15
    command: ["--cassandra.keyspace=jaeger_v1_dc1", "--cassandra.servers=cassandra", "--collector.zipkin.http-port=9411", "--log-level=debug"]
    ports:
    - "14269"
    - "14268:14268"
    - "14267"
    - "14250"
    - "9411:9411"
    expose:
    - "9411"
    restart: on-failure
    networks:
      - default
      - envoymesh
    depends_on:
    - cassandra-schema

  jaeger-query:
    image: jaegertracing/jaeger-query:1.15
    command: ["--cassandra.keyspace=jaeger_v1_dc1", "--cassandra.servers=cassandra"]
    ports:
    - "16686:16686"
    - "16687"
    expose:
    - "16686"
    networks:
      - default
      - envoymesh
    restart: on-failure
    depends_on:
    - cassandra-schema

  jaeger-agent:
    image: jaegertracing/jaeger-agent:1.15
    command: ["--reporter.grpc.host-port=jaeger-collector:14250"]
    ports:
    - "5775:5775/udp"
    - "6831:6831/udp"
    - "6832:6832/udp"
    - "5778:5778"
    expose:
      - "6831"
    restart: on-failure
    networks:
      - default
      - envoymesh
    depends_on:
    - jaeger-collector

  cassandra:
    image: cassandra:3.9
    networks:
      - default

  cassandra-schema:
    image: jaegertracing/jaeger-cassandra-schema:1.15
    networks:
      - default
    depends_on:
    - cassandra

  lb:
    image: traefik:v1.7 # The official Traefik docker image
    command: --api --docker # Enables the web UI and tells Traefik to listen to docker
    networks:
      - envoymesh
    ports:
      - "80:80"     # The HTTP port
      - "8080:8080" # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  gateway:
    build:
      context: ../gateway
      dockerfile: Dockerfile-gateway
    command:
      - bash
      - -c
      - /usr/local/bin/envoy -c /etc/bootstrap.yaml --service-node ingressgateway-$${HOSTNAME}
    volumes:
      - ./envoy-bootstrap.yaml:/etc/bootstrap.yaml
    networks:
      - envoymesh
    labels:
      - "traefik.frontend.rule=Host:1.example.com" # Add to Load balancer
    expose:
      - "80"
      - "8001"
      - "15090"
      - "15000"
    # ports:
    #   - "8000:80"
    #   - "8001:8001"
    #   - "15090:15090"
    #   - "15000:15000"

  navigator:
    build:
      context: ../navigator
      dockerfile: Dockerfile
    networks:
      envoymesh:
        aliases:
          - navigator
    environment:
      - XDS_PORT=8080
      - HTTP_PORT=8081
      - SERVICE_HOSTNAME_FORMAT=service%d
      - SERVICE_PORT=80
    expose:
      - "8080"
      - "8081"
    ports:
      - "8081:8081"


  service1:
    image: containous/whoami
    networks:
      envoymesh:
        aliases:
          - service2

  service2:
    image: containous/whoami
    networks:
      envoymesh:
        aliases:
          - service2

  service3:
    image: containous/whoami
    networks:
      envoymesh:
        aliases:
          - service3

networks:
  default: {}
  envoymesh:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

